{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"style\"],\n  _excluded2 = [\"style\"];\nimport View from '../../../exports/View';\nimport { AnimatedEvent } from './AnimatedEvent';\nimport AnimatedProps from './nodes/AnimatedProps';\nimport * as React from 'react';\nimport NativeAnimatedHelper from './NativeAnimatedHelper';\nimport invariant from 'fbjs/lib/invariant';\nimport setAndForwardRef from '../Utilities/setAndForwardRef';\nvar animatedComponentNextId = 1;\nfunction createAnimatedComponent(Component, options) {\n  invariant(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, '`createAnimatedComponent` does not support stateless functional components; ' + 'use a class component instead.');\n  class AnimatedComponent extends React.Component {\n    constructor() {\n      super(...arguments);\n      this._invokeAnimatedPropsCallbackOnMount = false;\n      this._eventDetachers = [];\n      this._animatedComponentId = animatedComponentNextId++ + \":animatedComponent\";\n      this._isFabric = () => {\n        var _this$_component$_int, _this$_component$_int2, _this$_component$getN, _this$_component$getN2, _this$_component$getS, _this$_component$getS2;\n\n        // When called during the first render, `_component` is always null.\n        // Therefore, even if a component is rendered in Fabric, we can't detect\n        // that until ref is set, which happens sometime after the first render.\n        // In cases where this value switching between \"false\" and \"true\" on Fabric\n        // causes issues, add an additional check for _component nullity.\n        if (this._component == null) {\n          return false;\n        }\n        return (\n          // eslint-disable-next-line dot-notation\n          ((_this$_component$_int = this._component['_internalInstanceHandle']) == null ? void 0 : (_this$_component$_int2 = _this$_component$_int.stateNode) == null ? void 0 : _this$_component$_int2.canonical) != null ||\n          // Some components have a setNativeProps function but aren't a host component\n          // such as lists like FlatList and SectionList. These should also use\n          // forceUpdate in Fabric since setNativeProps doesn't exist on the underlying\n          // host component. This crazy hack is essentially special casing those lists and\n          // ScrollView itself to use forceUpdate in Fabric.\n          // If these components end up using forwardRef then these hacks can go away\n          // as this._component would actually be the underlying host component and the above check\n          // would be sufficient.\n          this._component.getNativeScrollRef != null && this._component.getNativeScrollRef() != null &&\n          // eslint-disable-next-line dot-notation\n          ((_this$_component$getN = this._component.getNativeScrollRef()['_internalInstanceHandle']) == null ? void 0 : (_this$_component$getN2 = _this$_component$getN.stateNode) == null ? void 0 : _this$_component$getN2.canonical) != null || this._component.getScrollResponder != null && this._component.getScrollResponder() != null && this._component.getScrollResponder().getNativeScrollRef != null && this._component.getScrollResponder().getNativeScrollRef() != null && ((_this$_component$getS = this._component.getScrollResponder().getNativeScrollRef()[\n          // eslint-disable-next-line dot-notation\n          '_internalInstanceHandle']) == null ? void 0 : (_this$_component$getS2 = _this$_component$getS.stateNode) == null ? void 0 : _this$_component$getS2.canonical) != null\n        );\n      };\n      this._waitForUpdate = () => {\n        if (this._isFabric()) {\n          NativeAnimatedHelper.API.setWaitingForIdentifier(this._animatedComponentId);\n        }\n      };\n      this._markUpdateComplete = () => {\n        if (this._isFabric()) {\n          NativeAnimatedHelper.API.unsetWaitingForIdentifier(this._animatedComponentId);\n        }\n      };\n      this._animatedPropsCallback = () => {\n        if (this._component == null) {\n          // AnimatedProps is created in will-mount because it's used in render.\n          // But this callback may be invoked before mount in async mode,\n          // In which case we should defer the setNativeProps() call.\n          // React may throw away uncommitted work in async mode,\n          // So a deferred call won't always be invoked.\n          this._invokeAnimatedPropsCallbackOnMount = true;\n        } else if (process.env.NODE_ENV === 'test' ||\n        // For animating properties of non-leaf/non-native components\n        typeof this._component.setNativeProps !== 'function' ||\n        // In Fabric, force animations to go through forceUpdate and skip setNativeProps\n        this._isFabric()) {\n          this.forceUpdate();\n        } else if (!this._propsAnimated.__isNative) {\n          this._component.setNativeProps(this._propsAnimated.__getAnimatedValue());\n        } else {\n          throw new Error('Attempting to run JS driven animation on animated ' + 'node that has been moved to \"native\" earlier by starting an ' + 'animation with `useNativeDriver: true`');\n        }\n      };\n      this._setComponentRef = setAndForwardRef({\n        getForwardedRef: () => this.props.forwardedRef,\n        setLocalRef: ref => {\n          this._prevComponent = this._component;\n          this._component = ref; // TODO: Delete this in a future release.\n\n          if (ref != null && ref.getNode == null) {\n            ref.getNode = () => {\n              var _ref$constructor$name;\n              console.warn('%s: Calling `getNode()` on the ref of an Animated component ' + 'is no longer necessary. You can now directly use the ref ' + 'instead. This method will be removed in a future release.', (_ref$constructor$name = ref.constructor.name) !== null && _ref$constructor$name !== void 0 ? _ref$constructor$name : '<<anonymous>>');\n              return ref;\n            };\n          }\n        }\n      });\n    }\n    _attachNativeEvents() {\n      var _this$_component,\n        _this = this;\n\n      // Make sure to get the scrollable node for components that implement\n      // `ScrollResponder.Mixin`.\n      var scrollableNode = (_this$_component = this._component) != null && _this$_component.getScrollableNode ? this._component.getScrollableNode() : this._component;\n      var _loop = function _loop(key) {\n        var prop = _this.props[key];\n        if (prop instanceof AnimatedEvent && prop.__isNative) {\n          prop.__attach(scrollableNode, key);\n          _this._eventDetachers.push(() => prop.__detach(scrollableNode, key));\n        }\n      };\n      for (var key in this.props) {\n        _loop(key);\n      }\n    }\n    _detachNativeEvents() {\n      this._eventDetachers.forEach(remove => remove());\n      this._eventDetachers = [];\n    }\n    _attachProps(nextProps) {\n      var oldPropsAnimated = this._propsAnimated;\n      if (nextProps === oldPropsAnimated) {\n        return;\n      }\n      this._propsAnimated = new AnimatedProps(nextProps, this._animatedPropsCallback); // When you call detach, it removes the element from the parent list\n      // of children. If it goes to 0, then the parent also detaches itself\n      // and so on.\n      // An optimization is to attach the new elements and THEN detach the old\n      // ones instead of detaching and THEN attaching.\n      // This way the intermediate state isn't to go to 0 and trigger\n      // this expensive recursive detaching to then re-attach everything on\n      // the very next operation.\n\n      if (oldPropsAnimated) {\n        oldPropsAnimated.__restoreDefaultValues();\n        oldPropsAnimated.__detach();\n      }\n    }\n    render() {\n      var _ref = this._propsAnimated.__getValue() || {},\n        _ref$style = _ref.style,\n        style = _ref$style === void 0 ? {} : _ref$style,\n        props = _objectWithoutPropertiesLoose(_ref, _excluded);\n      var _ref2 = this.props.passthroughAnimatedPropExplicitValues || {},\n        _ref2$style = _ref2.style,\n        passthruStyle = _ref2$style === void 0 ? {} : _ref2$style,\n        passthruProps = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n      var mergedStyle = _objectSpread(_objectSpread({}, style), passthruStyle);\n      return /*#__PURE__*/React.createElement(Component, _extends({}, props, passthruProps, {\n        style: mergedStyle,\n        ref: this._setComponentRef\n      }));\n    }\n    UNSAFE_componentWillMount() {\n      this._waitForUpdate();\n      this._attachProps(this.props);\n    }\n    componentDidMount() {\n      if (this._invokeAnimatedPropsCallbackOnMount) {\n        this._invokeAnimatedPropsCallbackOnMount = false;\n        this._animatedPropsCallback();\n      }\n      this._propsAnimated.setNativeView(this._component);\n      this._attachNativeEvents();\n      this._markUpdateComplete();\n    }\n    UNSAFE_componentWillReceiveProps(newProps) {\n      this._waitForUpdate();\n      this._attachProps(newProps);\n    }\n    componentDidUpdate(prevProps) {\n      if (this._component !== this._prevComponent) {\n        this._propsAnimated.setNativeView(this._component);\n      }\n      if (this._component !== this._prevComponent || prevProps !== this.props) {\n        this._detachNativeEvents();\n        this._attachNativeEvents();\n      }\n      this._markUpdateComplete();\n    }\n    componentWillUnmount() {\n      this._propsAnimated && this._propsAnimated.__detach();\n      this._detachNativeEvents();\n      this._markUpdateComplete();\n      this._component = null;\n      this._prevComponent = null;\n    }\n  }\n  return /*#__PURE__*/React.forwardRef(function AnimatedComponentWrapper(props, ref) {\n    return /*#__PURE__*/React.createElement(AnimatedComponent, _extends({}, props, ref == null ? null : {\n      forwardedRef: ref\n    }));\n  });\n}\nexport default createAnimatedComponent;","map":null,"metadata":{},"sourceType":"module"}