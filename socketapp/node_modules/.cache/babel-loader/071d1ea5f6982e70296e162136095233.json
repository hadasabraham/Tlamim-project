{"ast":null,"code":"var _jsxFileName = \"/Users/omeryer/Downloads/react-flask-socketio-master/socketapp/src/socketDashboard.js\";\nimport React, { useEffect, useState } from \"react\";\nimport io from 'socket.io-client';\nuseEffect(() => {\n  socket.on('Data', payload => {});\n}, []);\n\nclass Dashboard extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      socketData: \"\",\n      socketStatus: \"On\"\n    };\n\n    this.handleEmit = () => {\n      if (this.state.socketStatus === \"On\") {\n        this.socket.emit(\"message\", {\n          'data': 'Stop Sending',\n          'status': 'Off'\n        });\n        this.setState({\n          'socketStatus': \"Off\"\n        });\n      } else {\n        this.socket.emit(\"message\", {\n          'data': 'Start Sending',\n          'status': 'On'\n        });\n        this.setState({\n          'socketStatus': \"On\"\n        });\n      }\n\n      console.log(\"Emit Clicked\");\n    };\n  }\n\n  componentWillUnmount() {\n    this.socket.close();\n    console.log(\"component unmounted\");\n  }\n\n  componentDidMount() {\n    var sensorEndpoint = \"http://localhost:5015\";\n    this.socket = io.connect(sensorEndpoint, {\n      reconnection: true,\n      transports: ['websocket']\n    });\n    console.log(\"component mounted\");\n    this.socket.on(\"responseMessage\", message => {\n      this.setState({\n        'socketData': message.temperature\n      });\n      console.log(\"responseMessage\", message);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Data: \", this.state.socketData), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"Status: \", this.state.socketStatus), React.createElement(\"div\", {\n      onClick: this.handleEmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \" Start/Stop\"));\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/omeryer/Downloads/react-flask-socketio-master/socketapp/src/socketDashboard.js"],"names":["React","useEffect","useState","io","socket","on","payload","Dashboard","Component","state","socketData","socketStatus","handleEmit","emit","setState","console","log","componentWillUnmount","close","componentDidMount","sensorEndpoint","connect","reconnection","transports","message","temperature","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEAF,SAAS,CAAC,MAAM;AACZG,EAAAA,MAAM,CAACC,EAAP,CAAU,MAAV,EAAkBC,OAAO,IAAI,CAAG,CAAhC;AACH,CAFQ,EAEN,EAFM,CAAT;;AAIA,MAAMC,SAAN,SAAwBP,KAAK,CAACQ,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACpCC,KADoC,GAC5B;AACJC,MAAAA,UAAU,EAAE,EADR;AAEJC,MAAAA,YAAY,EAAC;AAFT,KAD4B;;AAAA,SAyBpCC,UAzBoC,GAyBzB,MAAI;AACX,UAAG,KAAKH,KAAL,CAAWE,YAAX,KAA0B,IAA7B,EAAkC;AAClC,aAAKP,MAAL,CAAYS,IAAZ,CAAiB,SAAjB,EAA4B;AAAC,kBAAO,cAAR;AAAwB,oBAAS;AAAjC,SAA5B;AACA,aAAKC,QAAL,CAAc;AAAC,0BAAe;AAAhB,SAAd;AACH,OAHG,MAIA;AACA,aAAKV,MAAL,CAAYS,IAAZ,CAAiB,SAAjB,EAA4B;AAAC,kBAAO,eAAR;AAAyB,oBAAS;AAAlC,SAA5B;AACA,aAAKC,QAAL,CAAc;AAAC,0BAAe;AAAhB,SAAd;AACC;;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH,KAnCmC;AAAA;;AAMpCC,EAAAA,oBAAoB,GAAG;AACnB,SAAKb,MAAL,CAAYc,KAAZ;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH;;AACDG,EAAAA,iBAAiB,GAAG;AAChB,QAAIC,cAAc,GAAG,uBAArB;AACI,SAAKhB,MAAL,GAAcD,EAAE,CAACkB,OAAH,CAAWD,cAAX,EAA2B;AACzCE,MAAAA,YAAY,EAAE,IAD2B;AAEzCC,MAAAA,UAAU,EAAE,CAAC,WAAD;AAF6B,KAA3B,CAAd;AAIJR,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACI,SAAKZ,MAAL,CAAYC,EAAZ,CAAe,iBAAf,EAAkCmB,OAAO,IAAI;AACzC,WAAKV,QAAL,CAAc;AAAC,sBAAcU,OAAO,CAACC;AAAvB,OAAd;AAEAV,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BQ,OAA/B;AACH,KAJD;AAMP;;AAcDE,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAY,KAAKjB,KAAL,CAAWC,UAAvB,CADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAc,KAAKD,KAAL,CAAWE,YAAzB,CAFA,EAGA;AAAK,MAAA,OAAO,EAAE,KAAKC,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAHA,CADJ;AAOH;;AA7CmC;;AA+CxC,eAAeL,SAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport io from 'socket.io-client';\n\nuseEffect(() => {\n    socket.on('Data', payload => { });\n}, []);\n\nclass Dashboard extends React.Component {\n    state = {\n        socketData: \"\",\n        socketStatus:\"On\"\n    }\n\n    componentWillUnmount() {\n        this.socket.close()\n        console.log(\"component unmounted\")\n    }\n    componentDidMount() {\n        var sensorEndpoint = \"http://localhost:5015\"\n            this.socket = io.connect(sensorEndpoint, {\n            reconnection: true,\n            transports: ['websocket']\n        });\n        console.log(\"component mounted\")\n            this.socket.on(\"responseMessage\", message => {\n                this.setState({'socketData': message.temperature})\n                \n                console.log(\"responseMessage\", message)\n            })\n            \n    }\n    \n    handleEmit=()=>{\n        if(this.state.socketStatus===\"On\"){\n        this.socket.emit(\"message\", {'data':'Stop Sending', 'status':'Off'})\n        this.setState({'socketStatus':\"Off\"})\n    }\n    else{        \n        this.socket.emit(\"message\", {'data':'Start Sending', 'status':'On'})\n        this.setState({'socketStatus':\"On\"})\n        }\n        console.log(\"Emit Clicked\")\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n            <div>Data: {this.state.socketData}</div>\n            <div>Status: {this.state.socketStatus}</div>\n            <div onClick={this.handleEmit}> Start/Stop</div>\n            </React.Fragment>\n        )\n    }\n}\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}