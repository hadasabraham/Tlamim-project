{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\n\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from 'fbjs/lib/invariant';\nimport unmountComponentAtNode from '../unmountComponentAtNode';\nimport renderApplication, { getApplication as _getApplication } from './renderApplication';\nvar emptyObject = {};\nvar runnables = {};\nvar componentProviderInstrumentationHook = component => component();\nvar wrapperComponentProvider;\n/**\n * `AppRegistry` is the JS entry point to running all React Native apps.\n */\n\nexport default class AppRegistry {\n  static getAppKeys() {\n    return Object.keys(runnables);\n  }\n  static getApplication(appKey, appParameters) {\n    invariant(runnables[appKey] && runnables[appKey].getApplication, \"Application \" + appKey + \" has not been registered. \" + 'This is either due to an import error during initialization or failure to call AppRegistry.registerComponent.');\n    return runnables[appKey].getApplication(appParameters);\n  }\n  static registerComponent(appKey, componentProvider) {\n    runnables[appKey] = {\n      getApplication: appParameters => _getApplication(componentProviderInstrumentationHook(componentProvider), appParameters ? appParameters.initialProps : emptyObject, wrapperComponentProvider && wrapperComponentProvider(appParameters)),\n      run: appParameters => renderApplication(componentProviderInstrumentationHook(componentProvider), wrapperComponentProvider && wrapperComponentProvider(appParameters), appParameters.callback, {\n        hydrate: appParameters.hydrate || false,\n        initialProps: appParameters.initialProps || emptyObject,\n        rootTag: appParameters.rootTag\n      })\n    };\n    return appKey;\n  }\n  static registerConfig(config) {\n    config.forEach(_ref => {\n      var appKey = _ref.appKey,\n        component = _ref.component,\n        run = _ref.run;\n      if (run) {\n        AppRegistry.registerRunnable(appKey, run);\n      } else {\n        invariant(component, 'No component provider passed in');\n        AppRegistry.registerComponent(appKey, component);\n      }\n    });\n  } // TODO: fix style sheet creation when using this method\n\n  static registerRunnable(appKey, run) {\n    runnables[appKey] = {\n      run\n    };\n    return appKey;\n  }\n  static runApplication(appKey, appParameters) {\n    var isDevelopment = process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test';\n    if (isDevelopment) {\n      var params = _objectSpread({}, appParameters);\n      params.rootTag = \"#\" + params.rootTag.id;\n      console.log(\"Running application \\\"\" + appKey + \"\\\" with appParams:\\n\", params, \"\\nDevelopment-level warnings: \" + (isDevelopment ? 'ON' : 'OFF') + \".\" + (\"\\nPerformance optimizations: \" + (isDevelopment ? 'OFF' : 'ON') + \".\"));\n    }\n    invariant(runnables[appKey] && runnables[appKey].run, \"Application \\\"\" + appKey + \"\\\" has not been registered. \" + 'This is either due to an import error during initialization or failure to call AppRegistry.registerComponent.');\n    runnables[appKey].run(appParameters);\n  }\n  static setComponentProviderInstrumentationHook(hook) {\n    componentProviderInstrumentationHook = hook;\n  }\n  static setWrapperComponentProvider(provider) {\n    wrapperComponentProvider = provider;\n  }\n  static unmountApplicationComponentAtRootTag(rootTag) {\n    unmountComponentAtNode(rootTag);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}